/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.05.2025 01:04:50

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1568;
#else
constexpr int kTensorArenaSize = 544;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,24 } };
const TfArray<1, float> quant0_scale = { 1, { 0.24952942132949829, } };
const TfArray<1, int> quant0_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data1[3] = { 7, -15, 15, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00023684350890107453, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[3*10] = { 
  73, 14, 109, -98, -44, 58, 96, -98, -127, 94, 
  73, 75, -24, -84, -123, 9, 33, -105, 12, -28, 
  -106, -26, 127, 3, -107, -98, -106, -54, 118, 35, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 3,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0052310219034552574, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[10] = { 5, -43, 0, 15, 36, -9, -42, 82, -3, 27, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 9.6818374004215002e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[10*200] = { 
  33, -62, -57, 11, 91, 15, 107, -103, -12, -42, 20, 17, 51, 109, 55, -66, 9, -16, -57, 29, 83, -80, 58, 26, -92, 33, 52, 88, -44, 42, 67, 77, -90, -69, 88, -90, -28, 8, 46, -62, 47, 23, -27, -12, 4, -86, 37, 23, 6, 68, -48, -66, -7, 104, 23, -84, -1, -33, -93, 56, 69, -64, 9, 29, -23, 32, -34, 64, -67, 20, -10, 15, 83, 31, 69, -77, 47, 33, -24, -46, -95, -32, 16, -71, 51, 56, -2, -52, 16, 10, -43, -53, -61, 106, 18, -79, -90, 20, -30, -97, -54, 57, -88, -88, 22, -1, -94, 14, 23, -93, 57, -48, 103, 75, 106, 43, -14, -64, 13, -56, -47, -15, 86, 96, 23, 51, 75, -4, 60, 41, 103, -2, -95, -28, 72, -84, 28, 43, 73, -98, -27, -9, 40, -71, -59, 88, 14, -9, 30, -88, -96, -25, -68, 30, -41, 42, -3, -72, 74, 72, 65, 94, 88, 15, 48, 50, 15, 78, 81, 20, 64, -50, -53, -16, 52, -20, 43, 5, -95, 64, -20, 24, -38, 78, 67, 28, 2, -81, 67, -69, 47, -58, 29, 86, 9, -43, -101, 68, 17, 66, 
  -56, -91, 54, 59, 43, -43, -43, -99, -93, 19, -49, -47, 51, 38, 56, 91, -35, 30, -36, -15, 6, -54, -85, 46, 92, 39, -62, -47, -49, -46, 88, -4, -60, -86, 6, -25, -38, 75, 55, 5, 38, 69, -13, 51, -78, -3, 81, -56, 105, 39, -81, 42, -36, 0, 2, 34, 35, 31, 64, -81, -4, -1, 72, 59, 75, 2, 83, -20, 71, 52, -95, -10, 72, -29, 12, -55, -75, 40, -26, -83, 82, 48, 43, -92, 10, -47, 11, -31, -72, -44, 3, 19, -36, -34, 32, 42, 45, -50, -86, -96, -96, 68, 8, -42, -52, -103, -50, 92, -17, 49, -9, 21, -93, 71, -38, 74, 21, 85, 54, -36, -12, 8, 79, 6, -17, -93, -64, 47, -51, -51, -57, -72, -70, -49, -26, -99, 92, -44, 97, 77, 92, -59, -33, 76, 98, 7, -13, 61, 41, 104, 43, 29, 48, -16, 30, -102, 9, 60, 6, -2, 111, -109, -34, -59, 32, 75, 75, -45, 74, 36, -24, -30, -85, 39, 100, -35, 20, -6, -33, -6, 102, 95, -1, 73, 57, -74, 17, -22, 21, -30, -2, 45, 9, 24, 16, -12, 66, -3, 32, -11, 
  -20, -85, -3, 93, -43, -52, -31, 18, -36, -10, 28, 45, -19, -76, -12, -62, 74, -86, -88, -71, -45, 60, -5, -103, 99, -34, -35, 51, -7, 68, 13, 55, -31, 45, 19, 62, -29, 21, -83, 29, 74, -67, 93, 76, 81, 52, -95, -103, 92, 15, -38, -48, 83, 101, 78, 0, -51, -24, 41, -4, -88, -90, 97, 35, -19, 3, 97, 96, -91, 35, -72, 27, 16, -52, 85, -72, -35, -51, -3, -87, -22, -52, -79, -36, 55, -54, 99, 54, -44, -2, 98, 46, 53, -64, -24, -44, 85, 7, 35, -38, -93, 90, -6, 77, -67, -19, 80, 4, -17, 98, -14, -69, -76, -16, -47, 40, -7, -44, 85, 3, -58, -21, -28, -74, 91, 37, -66, -78, -88, -66, -47, -70, -97, -61, -15, -96, -73, 18, -84, 86, -97, 81, -54, 61, 86, -9, -2, 62, -88, 0, -62, -55, -74, 90, -94, 10, 10, -50, 41, -70, 34, -70, 68, 58, 52, 8, -80, -58, -80, -45, 85, -93, -42, 29, 92, 26, -99, -39, 60, 92, 76, -86, -17, 0, 5, 4, 53, -93, 31, -97, -47, 29, -48, -77, 73, 59, -84, 74, -35, -96, 
  54, 6, 81, 3, -62, 69, -54, -28, -16, 62, 91, 43, -59, -82, -10, -45, -29, -52, 91, 70, 96, 72, -62, -32, 25, -82, 14, 12, -14, 58, 60, 85, 51, 71, 41, -3, -77, 62, 44, -20, -64, 15, 9, -35, -85, 51, 5, 100, -82, 19, 50, 8, -48, 21, -75, 79, -46, -94, -47, 46, -59, 72, 10, -64, -80, -55, -19, -38, -22, 85, -79, -28, -39, -16, -66, -18, -107, 33, -39, 97, 80, -106, 32, 112, 72, 80, -100, -62, -39, -63, -40, -49, 5, -72, 86, 7, -65, 85, 12, 51, -100, -46, -22, 19, -19, 84, 26, 27, 85, -33, -86, 69, 35, -34, 33, -24, 58, 67, -20, 94, -90, 63, 48, -62, 75, -21, 99, -5, 83, -68, -13, -20, -87, 91, 93, 10, 79, 32, 74, -63, -74, -5, -99, -102, 73, -24, -103, 15, 26, -103, -8, 76, -52, 87, 92, -102, -50, 84, 47, -41, 41, 26, 44, 85, -63, 40, 35, 1, -43, 69, -4, 77, -52, 88, -42, 8, -38, -60, -99, 24, 98, 34, -12, -38, -74, -5, -71, 26, -4, 51, 80, -34, -81, -33, 98, -87, -21, 52, -37, 41, 
  -36, 51, -80, -38, -71, 70, -30, 25, -72, 51, 82, 50, -19, 30, 29, -91, -44, 93, 64, 43, -87, -1, 77, -68, -16, -66, -21, 40, 50, -71, 38, 42, -77, 17, 59, 86, -54, -100, 6, 2, -47, -39, 105, 8, -26, -86, -24, 37, 93, 3, -37, -14, 73, -30, 34, 70, -13, 35, 20, -8, -64, 31, -92, 86, -32, -69, -73, 106, 47, -58, 101, 24, -1, 14, 105, -34, 90, 73, 63, -8, -45, 25, -59, -89, -9, 48, 80, 76, -99, -76, 94, 91, -51, -54, -39, -1, -11, 98, -67, 64, 20, 107, 85, -72, 86, 72, -81, 6, 0, -52, -31, -34, -83, -14, -83, 81, 61, -109, -102, -37, -82, -37, -12, 76, 38, -98, 79, -83, -94, 61, 28, -70, -17, 79, 34, -31, -61, 51, 98, 2, -88, -94, -17, 3, 98, 95, 65, 78, -117, 77, -4, 99, -9, 57, 23, 108, -69, 90, -52, -82, -108, -94, -15, 56, -14, 14, 83, 66, 68, -127, 65, 76, 12, 60, -87, 97, 84, -50, 86, -90, -44, 40, 59, 91, 45, 104, -77, 77, 63, 90, 27, -38, 105, -37, -22, 53, -18, -28, 73, 72, 
  -78, 66, -59, 45, -23, -102, -4, 57, -111, -38, 66, 53, -50, 49, -15, -57, -28, 59, -59, 6, -99, 81, 57, -4, -25, 39, -7, 6, 19, -71, -94, 66, 4, -98, 39, 64, -71, 22, 15, 92, 82, -50, -76, -2, -83, 73, -82, -92, -39, -25, 83, -11, -31, 59, 84, -91, 48, -15, 29, 36, 107, 64, -85, -80, 46, 69, 39, 95, 45, 7, -22, -93, 52, 54, 42, 92, 60, -64, -39, -60, -82, -44, -27, 58, -79, -52, 4, -65, -20, 105, 5, -36, 24, 21, -15, 19, 24, 4, 18, -42, -74, 29, -80, -44, 35, 16, -56, -88, -32, -62, -54, 11, -73, -59, -23, -12, 67, -29, 44, 54, -79, -52, -61, -83, 44, -71, 69, -84, -85, 86, -51, 75, 55, -53, -50, -6, 2, 5, -39, 99, -34, 47, -3, 63, -70, 92, -69, -92, 16, 16, -64, 67, -91, 85, 61, 16, 53, -50, -84, 96, -12, 10, 60, -7, 69, 53, -46, 17, 45, 15, 3, 5, 5, -1, 23, 68, 36, 96, -82, 103, 73, 83, -59, 66, -40, 8, -29, -67, 51, -72, -34, 46, 98, 15, -40, 69, 83, -89, 89, 100, 
  78, 41, -51, -69, 73, 71, 11, -41, -29, 2, 51, 36, -67, -45, 11, -12, 56, -10, -12, -30, -8, -23, 0, -85, 64, 34, -53, 65, -102, 64, -55, 20, -20, -48, 41, -32, 3, -30, 81, -95, -36, 93, -21, 38, -37, -16, 36, 36, -66, -108, 80, -22, 87, 56, -11, -29, -97, -86, -27, 99, 6, -51, -78, -24, 31, 78, 92, 10, -60, 12, 66, 18, 19, 32, -71, 20, 39, -8, 52, -98, 58, -10, 34, -32, -37, 55, -95, -39, -79, 76, -107, 0, -71, 93, 102, 46, 64, 4, 91, -65, -10, 54, 16, 91, -24, 41, -70, -36, -47, 10, -95, -74, -10, 20, -97, -90, -33, -88, -21, -43, -83, -33, 75, 75, -16, 5, 28, 47, -70, -86, 87, 78, -90, 57, -8, 24, -11, 38, 27, 33, -43, 15, -22, 69, 102, -39, -16, -41, 55, -72, 86, 8, -19, -101, 60, -50, 76, -26, 1, -13, 97, 71, 33, -94, 53, 56, 27, -57, 4, -47, -84, 86, -96, -16, 20, -13, -54, 105, 100, -30, 46, -90, 50, 13, -99, 1, -53, 3, 44, -20, -45, -17, 73, -30, -72, 55, -66, 48, -89, 99, 
  -6, 73, 47, 54, -7, 79, 75, -85, 111, -30, -50, 100, 64, -34, -86, 36, 68, 1, 9, 65, 7, 48, -56, -51, 61, 80, -29, 94, -87, -35, -39, -13, 98, -66, -83, -59, 21, 73, 86, -18, 98, 65, 59, -29, -66, -58, -80, -38, 44, -37, -104, -82, -22, -79, -93, -103, 80, -32, -60, 63, 93, -49, 84, 68, -84, 21, -62, -12, 96, 13, -37, 44, -65, -100, 49, 2, -42, -73, 30, 54, 14, -91, 93, -79, -65, 14, 39, -106, 86, -41, 29, 26, 12, 16, -34, 0, 94, 62, -2, 44, -36, 80, -67, -50, -1, 74, -68, 81, -48, 72, -31, 9, 71, -110, 37, 12, -57, 1, 54, -58, -73, -97, 85, 74, 46, -67, 32, -6, 40, 6, -40, -37, 13, -19, -71, -36, 91, 39, -51, 75, 2, -40, -64, -80, 96, -25, 18, -97, -15, -10, 34, 90, -91, 97, -89, -47, -99, 39, -56, -49, -60, -11, -50, 42, -58, 65, 59, 40, -95, -26, 72, -22, 95, 51, 76, 51, 16, 87, 75, 30, -9, -38, 26, -95, 23, 21, -103, -89, -52, 73, 47, 56, 72, 70, 5, -90, -2, 39, -1, -57, 
  53, 35, 45, 36, 73, 26, -98, -12, -22, 8, 85, 19, 2, -81, -37, 85, -79, 59, -41, -26, 18, -92, 27, 53, 92, -79, 55, -95, 23, -33, -49, 103, 12, 9, -91, -82, 16, 113, -81, 93, -103, -48, -24, -41, 56, 22, 62, 109, 61, 84, 22, 100, -12, -84, -11, 35, 1, 78, 28, 68, 86, 83, 32, 18, -87, -93, 28, 72, 62, -3, 94, 2, 51, -17, 9, 96, -100, 72, -44, 56, 81, 25, -82, -69, 65, -84, 16, -45, -24, -74, -40, -11, -5, 84, 25, -56, 57, 42, -4, -23, -77, -41, -26, 7, 52, -7, 60, 87, -3, -38, -26, 41, 69, -71, -21, 45, -44, 22, 49, -74, -54, -96, -44, -79, 35, 93, 23, -105, -72, 99, -57, -88, -6, -43, 113, -23, 91, -29, 70, -67, 38, -91, -59, 43, 2, 48, -2, 37, -40, 15, -95, 24, 39, -65, -81, -78, -89, 86, -67, -75, -35, -1, -103, -27, 86, 100, -4, 47, -100, 83, -101, 84, -66, 39, -1, 39, -30, 11, -37, -24, 85, -51, -8, -65, -18, -52, -104, -76, -47, -77, 100, -87, -86, -12, 36, -35, 22, 61, -76, 17, 
  44, -68, -9, -2, 75, 96, -18, 25, 80, -85, -52, 43, -62, -65, 57, -28, -21, 82, 0, 56, 99, -95, -86, 11, 41, -68, -46, -5, 24, -80, 49, -78, -20, -25, -72, 103, -1, -61, -27, 47, 101, 51, 10, -101, -95, 66, -21, 88, -16, -22, -4, -28, 92, -1, 20, 71, -82, -69, -88, 90, 41, -44, 59, 70, -46, 29, -101, -4, -92, -5, -98, 46, 65, 66, 44, 102, -60, -38, 31, -16, -41, -72, 75, 23, 80, -14, -26, 87, 18, -90, 29, -50, 4, 33, 55, 107, -67, -72, -32, -68, -24, -37, 36, 101, 39, 88, -35, 3, 25, -79, 52, 8, -52, 37, 37, 81, 60, -77, -36, 3, -103, 90, -60, 47, -31, 27, 13, 38, -54, -94, 91, 2, 23, 28, -38, 72, -83, -10, 49, -87, 52, -50, 64, 25, -47, 88, -41, -59, -29, 59, -44, 84, -104, 12, -87, 29, 82, 2, 81, 38, 33, 45, -21, -7, 81, 90, -93, 3, -83, -21, -90, 95, -66, -2, 15, -48, 92, -89, 97, 27, -30, -29, -60, 19, 95, -12, -80, -31, 82, 90, 38, 54, 59, -59, -72, 20, 19, -94, 66, 99, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,200 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0016373391263186932, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[200] = { -1, 4, -2, 0, -21, 28, 2, 52, 32, -16, -4, 0, -22, 23, 12, -23, 1, 7, 9, -10, -11, -20, 0, -4, -4, -18, 0, -4, -2, -19, 0, 4, 0, 0, -15, 7, 0, 35, -39, 0, -8, -7, 23, -9, -21, -9, 12, 45, 25, 12, -2, -4, 20, -23, 22, -25, 0, -3, 0, 4, -22, -3, -30, 12, 0, 0, 0, -28, 24, -7, -1, -48, -15, -34, 7, 39, 12, -13, 1, -7, 0, -24, -29, 39, 8, 14, 0, -6, 4, -14, 16, 0, 2, -4, -8, 24, -8, 32, -15, 24, 4, -3, 0, 14, 0, 0, -16, 1, 8, -20, 7, -1, 0, 31, 5, 0, -10, 41, 0, 1, 0, -7, -8, -15, -20, -2, 13, -1, 0, 0, 0, -10, 34, -16, 22, 0, -23, 7, -13, 0, 0, 4, -5, -22, 0, 0, -12, -2, 13, 0, 0, 19, -15, -12, 10, 15, -7, 1, 0, 9, 37, 34, 25, 13, 34, 12, 0, -24, 23, 47, 6, 7, 2, 4, -11, -3, 13, -9, 0, -15, 23, 1, -9, 1, -8, 42, 10, -9, -2, 18, 6, -6, 6, -5, 23, 11, -2, 0, 0, 2, };
const TfArray<1, int> tensor_dimension5 = { 1, { 200 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00038531137397512794, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[200*24] = { 
  0, -8, 91, 27, 50, -28, 31, 28, 32, 38, -7, 80, 46, -96, 51, -43, 44, -52, 8, 94, -39, 86, 47, -25, 
  -90, -67, -9, -12, -38, -95, -23, 102, -8, 36, 22, -32, 23, -46, -110, -40, -59, -15, -84, 81, 70, -68, -78, 106, 
  69, -82, 102, -51, 56, 40, 90, 0, 41, -74, -103, -48, -53, 58, -14, 38, 11, -79, 58, 5, 89, 68, 3, 1, 
  -87, 85, -68, -47, -86, -68, 94, 60, 21, 42, -34, -88, -97, -40, 64, -27, -36, -99, -26, -15, -50, -7, 100, 0, 
  80, -26, -17, 42, 5, 62, -85, -96, 82, -34, -28, -73, 89, -36, 37, -8, -44, -23, -50, 80, -77, 87, 22, -60, 
  -19, -107, -70, -11, 83, 98, 16, 109, -69, 21, -6, -18, -109, -6, 50, 94, 69, 5, 87, -48, -17, 32, -57, -13, 
  48, 0, -49, 67, -16, -56, -58, 11, 78, -76, -60, -5, -55, 49, 38, -69, 97, -109, 78, 64, -56, -6, 0, -32, 
  85, -35, 98, 34, -8, -62, -85, -54, 120, -39, -19, -47, -20, 65, -30, 55, 0, 64, 7, -89, -34, -25, -35, 46, 
  67, -3, 105, 68, -43, -109, 55, -33, -36, -1, -65, -43, 77, -103, 85, 104, 70, 98, -86, 60, 73, 86, 91, 42, 
  -84, -86, -26, -50, 20, 50, -90, -70, 49, 87, 61, 46, 79, -52, 77, -99, -27, 24, -110, 5, 49, 2, 27, -88, 
  98, -77, -94, -103, 37, -43, 30, 80, -61, -3, 83, -27, -54, 71, -42, -14, 83, 65, 27, -76, 27, -2, 0, -38, 
  -14, 90, -24, -9, 46, -79, 80, -81, 47, 52, -13, -22, 104, -64, -8, 74, 95, 37, -37, -90, -20, -39, 6, -79, 
  -54, -19, 44, -50, -18, 74, -29, -6, 19, -69, -77, -11, 54, -6, 71, 22, 71, 83, -88, -14, 10, 53, 37, 18, 
  18, 18, -80, 32, 96, 52, 3, -93, -44, 3, 25, 70, 1, -76, 85, -44, -16, 89, 67, -14, -45, 21, -100, -67, 
  101, 105, 93, 109, -102, -14, 9, 14, 48, -54, -98, -42, -50, -42, -35, -38, 29, 56, -99, -84, 102, 40, -5, 66, 
  -5, 1, -104, 20, 51, 34, 15, -99, -82, -4, 72, 31, -57, -13, -51, 44, -66, -22, 100, -97, 75, -7, -44, 9, 
  -6, -91, -86, 36, -1, 26, -67, -94, 36, 21, -12, 52, 47, -19, 84, -41, -91, 52, 79, 107, -56, -87, -106, -98, 
  -15, -42, 62, -9, -94, -36, 22, 85, -74, 3, 94, -99, -67, 40, -106, 65, -80, -104, 108, 71, 3, -92, -35, 84, 
  -79, -104, -45, 55, -69, -3, -43, 74, 41, -89, -104, -83, 80, -108, 73, 9, 33, 96, 41, -3, 55, -3, -45, 24, 
  2, -88, -34, -69, -62, 34, -92, -94, 95, -91, -33, 98, 97, -92, 44, -87, -90, -41, 19, -37, 39, -28, -53, 71, 
  -17, 40, -30, 30, -12, -95, -44, -91, -1, -22, -108, 27, -1, -61, 0, 62, 75, -19, 33, -73, 59, 59, 66, -96, 
  -2, 51, -7, 101, -54, -6, 66, -54, -103, 36, 90, -97, -104, -39, 19, -27, -93, -71, 16, 37, -39, -27, -85, 66, 
  -14, 17, -98, 69, 54, -23, -36, -102, -57, 87, -90, 54, 84, -64, 91, -54, 74, -30, -83, 28, -5, -104, 21, 38, 
  52, 85, 36, 40, 58, -17, 44, -55, 56, 30, -13, 22, 88, -80, 71, -82, 45, -44, 71, -88, -29, 90, 46, 99, 
  21, 16, 95, -67, 33, 64, -90, 31, -101, 4, -94, -6, -30, -20, 18, 46, 69, -93, 3, -46, 91, 44, -12, -31, 
  67, -31, -94, -18, 32, -1, -90, -57, 32, 1, 30, -5, 63, 47, -1, 19, -107, 80, 40, 102, 49, -29, 91, 78, 
  -30, -8, 20, -97, 23, 87, 11, 93, 64, 66, -60, 56, 22, -99, 61, 87, 36, 75, -36, -64, -58, 45, 104, -2, 
  -99, 102, -64, 99, 32, -21, -39, 22, -100, -87, 59, -89, 24, -21, 65, -38, -99, -41, 81, -31, -9, -73, 18, -72, 
  105, 59, 75, -94, -48, -112, -33, -25, -50, -86, -66, 60, 75, 77, 1, 69, 10, -8, -44, 45, 26, -77, 67, -11, 
  43, -68, 62, -34, 39, 105, -53, 65, 98, 44, -86, -62, -107, -63, -67, -91, -109, 75, -8, -60, 22, -5, 31, -17, 
  24, 33, 48, -84, -14, -68, 35, 10, -71, 100, 64, 3, -89, -45, -77, 57, -91, -37, -94, -102, 80, -46, -6, -76, 
  32, 100, -27, -26, 70, 61, 66, 0, 85, -88, -7, 27, 99, 80, 10, -75, -25, 9, 92, -32, -84, 1, 88, -65, 
  -94, -102, 62, 30, 22, -107, -83, -40, 49, 99, 60, -38, -14, 45, 23, -75, -31, -62, -33, 97, 41, -110, 113, -43, 
  -106, 28, -83, -102, 51, 49, -36, -20, 47, 22, 91, -95, -39, -82, -15, -79, 70, -40, -76, -104, 6, 102, 95, -6, 
  -99, -99, 96, -64, 79, 60, 51, -74, 8, 33, 96, -5, -15, -52, 41, -76, 60, 45, -69, 8, -97, 71, 85, 74, 
  92, 35, 94, -32, -44, 3, -75, 89, -52, 107, 95, -92, 19, -45, 29, -25, 100, -54, -41, 67, 94, -63, -100, -27, 
  -68, -33, -61, -1, -18, -13, 91, -21, 94, 102, -14, 26, -15, 84, -25, -18, 35, -22, -48, -97, 60, 103, -12, -100, 
  52, 106, -48, -82, -37, -70, -73, -44, -118, 88, 46, -36, 108, 61, -110, 65, -83, -30, 100, 91, -45, 7, -36, -6, 
  -34, -32, 78, -55, 12, -84, -45, 47, 35, 87, 94, 3, -68, -54, -23, 46, -55, -84, -51, 3, -85, 19, 73, -31, 
  79, 83, -97, 15, -73, 48, 70, 70, -7, 17, 80, 79, 15, 2, -68, 53, -101, 65, -72, -24, -105, -15, 69, -60, 
  -23, -86, 86, 60, -82, 52, 17, -69, -17, -52, 18, 1, 20, 95, -68, -22, -66, -33, -93, 16, 97, -13, 33, -48, 
  77, 18, 84, 84, 97, 19, -35, 52, -53, 93, 0, 102, -32, 69, -12, -40, 56, 39, 42, 80, -79, 8, 29, 84, 
  -79, -83, 67, 62, -88, -18, -28, 17, 52, 28, -48, 5, 103, 3, 89, -19, 31, 16, 1, -30, 19, -49, 62, -39, 
  -67, 58, -76, 79, -8, -10, 110, -68, 59, -98, 82, 6, 13, -10, 27, 68, 83, -12, 93, 3, -53, 5, 63, -95, 
  11, -66, -28, 88, -96, -93, 98, 69, 54, 30, 18, -67, -66, 42, 72, -39, -97, -77, 27, 34, 5, 25, 33, 40, 
  27, -107, -6, 86, -66, 22, 61, 80, -45, -56, 81, 23, -90, -80, 6, 45, 52, -83, -112, 45, 61, -51, -22, 41, 
  -35, 2, -50, 2, -11, -105, 84, -29, -9, -50, 4, 77, -80, 4, -44, -23, -23, 55, 91, 69, -29, 84, 4, 64, 
  43, -50, -44, 35, 120, -34, 38, -7, 71, 9, 7, 26, -2, -31, 48, 7, 38, -32, -23, 69, -65, -111, 28, -99, 
  62, 54, 93, -16, -96, 102, 96, 15, -90, -102, -38, 27, 15, -88, 61, -69, 40, 21, -65, 8, -32, -67, 7, -32, 
  -82, -109, 19, -72, -55, -122, -75, 101, -107, -39, -91, -35, -45, -27, 40, -75, 44, 58, 54, -48, -73, 16, -87, -34, 
  52, 24, -88, -78, 13, -5, 54, -13, 40, 53, 52, 32, -66, -88, -51, 60, 83, -46, 43, 71, 38, 78, -42, -10, 
  92, 65, 97, 3, 90, 19, -3, -57, -92, -104, 76, 44, 8, 48, -14, -21, 9, 91, 45, -16, 86, -90, -32, 35, 
  6, 21, -61, -97, -80, -103, -86, 52, 94, 17, 55, 8, 41, 86, 84, -11, -110, -102, -32, 21, -67, -57, -7, 30, 
  -64, 100, -12, -85, 80, -77, -10, 59, -29, -68, 20, -67, -52, 26, 61, -79, 48, 37, -60, 38, 21, 36, 44, 62, 
  -51, -95, -48, -42, -96, 39, -69, 100, -77, -22, -61, 106, -6, 0, -40, 75, -1, -49, -75, -35, 89, -49, -59, -46, 
  -75, -52, -91, -44, 25, 69, 26, 79, 8, 28, 94, -109, -20, 17, -48, -37, -88, -54, -76, 26, -22, -40, 18, 92, 
  -42, 24, 40, 82, 18, -19, -61, -54, -106, 98, -18, 73, -64, -16, 60, 74, -22, 45, -94, -75, -77, 63, 93, 76, 
  92, -38, -83, 2, 104, 82, 54, 70, -102, -101, 5, 85, 30, -54, -95, -116, -102, 76, 90, -6, 9, -15, -2, 61, 
  56, -90, -57, -67, -63, 47, -69, 79, 91, 67, 25, -104, -28, 3, -15, 86, 38, 100, -95, -31, -37, 80, -22, 68, 
  12, 68, 93, 95, 36, -71, -90, -28, 14, -60, 76, -99, 37, 71, 35, -3, 86, 42, -32, 110, 19, -42, 30, -49, 
  81, -62, 13, -92, -37, -22, -68, -33, 28, 93, 47, 61, 90, 26, -60, 65, -49, -29, -76, 97, 26, -36, -88, -40, 
  15, 16, -22, 103, 76, -53, -23, -1, -3, 24, -18, 32, -54, -32, -45, -47, -46, -31, 27, 85, 3, -19, -34, 53, 
  -79, 59, -91, -84, -27, -14, 29, 80, -9, -33, -82, -87, -106, 49, 101, 9, 84, -102, 89, 76, -35, -39, -39, 12, 
  68, 57, -31, -39, 89, -97, 64, -67, -19, 19, -58, 71, 28, 78, -38, 108, 67, -90, 82, -59, -42, -31, -26, 91, 
  -66, -47, -17, -76, -38, -27, 96, 36, -74, 68, -31, -4, -13, -19, 10, -70, -24, 58, 32, -64, -95, 34, -27, -38, 
  -5, 49, -52, -64, -28, -43, -82, -77, 83, 81, -60, 61, 15, -37, -59, -95, -85, 2, -79, 12, 66, -41, -55, -46, 
  -57, 61, 68, -13, 5, 64, -64, 49, 31, 96, -29, -104, 1, 50, -105, 89, -74, 105, 5, -30, -55, -48, -22, -55, 
  86, 48, -9, -99, 94, 21, -69, 35, -10, -61, -101, 46, -91, 13, 91, 57, -28, 5, -63, 87, 18, 3, 59, 74, 
  -8, -42, 45, 5, -36, -89, -44, -75, -62, -35, 49, 59, -21, -18, -61, -89, -81, 79, -32, 59, -32, -45, -18, -61, 
  -11, -23, 92, -8, 20, -110, 88, -2, -69, -17, -41, -43, 93, -14, -4, -94, 41, -32, 76, 95, -32, 90, -93, 24, 
  -105, -87, 80, -24, -33, -13, 71, -46, -69, -54, 46, 50, -79, -93, 28, 89, 47, -90, -84, -105, -46, 39, -78, 69, 
  -45, 106, -9, -56, -28, 33, -35, -77, -45, -67, 62, 21, -33, -32, 57, 20, 42, -36, 63, -115, -82, 9, -28, -13, 
  -44, 62, 59, 88, -59, 33, 79, 59, 58, 16, 31, -52, -56, 8, -24, 22, -45, 28, -15, 62, 98, 72, -44, 57, 
  -15, 34, -42, -109, -83, -60, -73, -31, -30, 63, -84, 25, -41, -11, -93, -73, 14, 27, 11, 50, 44, -78, 99, -1, 
  22, 103, 79, 65, 68, -7, 96, -44, -48, 58, 79, 55, -63, -4, -56, 72, -13, -60, 3, 94, -43, -18, 44, -10, 
  -89, 44, 55, 64, -67, 95, -56, 99, 115, 60, -18, 28, -28, 100, -6, 74, 49, -79, -47, -79, -22, 82, 55, -92, 
  -21, 50, -45, -67, 73, -62, 13, 79, -29, 13, -8, -94, -6, 32, -49, 53, 86, 69, 56, 103, -28, 23, -113, -67, 
  74, 81, 98, 22, -37, 44, 107, 94, 11, -55, -70, 5, 93, 88, 76, -85, -9, 83, -51, 91, -75, 1, -23, 40, 
  -99, -77, 90, -91, 61, -45, 72, -46, 9, -27, 12, -62, 13, -22, -45, 64, -81, 76, 96, -39, 47, 95, 82, -90, 
  -53, 1, -84, -68, 57, 34, 39, -17, -88, -21, -83, -68, -54, 61, 30, -37, -31, -25, -15, 48, 60, 14, -13, -8, 
  30, -23, -96, -98, -90, -88, -16, -22, -21, -11, -28, -53, -104, 84, -40, 31, -37, -18, 7, 54, 31, -33, 90, -92, 
  -37, 70, 47, 65, 54, -20, -21, 9, 54, 12, -78, -36, 42, 101, 10, -35, -81, -11, -29, -21, -66, -74, 41, -72, 
  37, -54, 6, -27, 30, 59, -21, -25, 4, 111, 41, -72, 85, 51, -78, 45, -12, -38, -65, -6, -93, 68, -71, 96, 
  0, 36, 72, 72, 109, 36, -79, 31, -23, 77, -39, 15, -78, -20, 7, -69, -41, 56, 10, 14, 16, -33, 98, -57, 
  -71, -77, -28, -27, 65, -46, -2, 52, 34, 29, 92, 40, -91, -36, 69, 45, -101, 66, 22, -46, -83, 87, -43, 96, 
  -35, 19, 83, 25, 19, 61, -30, -108, -1, 6, 27, 71, 4, 16, 11, 85, 72, -90, -7, 35, -85, 73, 64, -89, 
  -65, 41, -42, -82, -52, 34, 50, 31, -60, -33, 101, 26, -39, 70, -77, -42, 65, 47, -46, -88, -10, -99, 27, -66, 
  95, -66, -21, -35, 40, -29, 46, 3, 32, -81, -19, 83, 34, -81, 43, 70, -31, -96, -83, -46, -18, 7, 20, -12, 
  -87, 14, 66, -84, -90, 46, 2, -29, 92, 88, 12, 84, 54, -80, -86, -45, -28, 92, 0, -85, 28, 89, -45, 35, 
  -72, -60, 99, 65, -53, -49, 11, -31, -80, 8, 14, 92, -55, -79, 10, 87, -1, -103, 52, 17, 49, 34, -79, -53, 
  -77, 44, 93, 110, -28, 80, 16, 5, -40, -16, 55, -100, 87, 20, -23, -50, -4, 75, -16, 10, -24, 16, -28, -95, 
  -81, -39, 32, 28, -55, 96, 74, 84, -98, 20, 65, -95, -8, -92, 69, -15, -92, 90, -71, -40, -77, -21, 46, 31, 
  75, -41, 57, 71, -99, -85, 9, 39, 102, -66, -5, -75, 29, 20, -38, -4, -77, 50, 72, -59, -6, 83, 91, -54, 
  86, -16, -50, -20, 82, 108, 77, 42, 48, -105, -63, -65, 99, -72, -31, -29, 10, -36, 35, -28, 90, -61, -38, -36, 
  5, -101, -101, -18, -19, -81, 17, 88, 21, -88, -90, -98, -76, 73, 75, 58, -82, -86, 29, -31, -106, -18, 68, -54, 
  -88, 44, 35, -3, 81, 61, 11, 42, 121, 94, 81, 68, 47, -75, 77, 83, 16, 53, -19, 62, 92, -16, -74, -34, 
  82, -34, 38, -35, -16, -27, -67, 75, -13, 15, 89, -94, 100, -66, -53, -13, 75, 44, 93, 97, 85, -44, 3, 23, 
  93, -84, -46, 21, 43, 10, -35, 65, 53, 68, -57, -65, 7, -3, 48, 19, 92, 94, -91, 92, 21, -33, -54, 51, 
  47, -77, -47, 101, 1, 74, 52, -105, 56, -72, -55, -63, 26, -22, 89, 7, -32, -5, 80, 17, -21, -50, -21, 10, 
  -2, -10, 3, 20, 12, 30, -93, -7, -10, 31, -16, 49, 31, -2, -6, 15, 34, 31, -42, 11, 44, 18, 64, 5, 
  54, 87, 72, 49, 92, 78, -82, -53, 24, -94, -40, 91, -23, -71, -20, -25, -44, 75, 38, 45, -64, -25, -82, -74, 
  11, -51, 47, -39, -34, -92, 9, 75, 5, 56, 50, 93, -7, 72, 63, 74, -36, 63, 87, 26, 19, 15, 74, -58, 
  -55, 73, -27, -34, -20, -86, 61, -90, 17, 71, -41, -86, 88, 51, 2, 102, -63, 19, 14, -71, -82, 40, 8, -2, 
  65, -34, 63, 22, -71, -79, -106, 45, -72, -30, 1, 85, -4, -64, 27, 51, 36, 55, -102, 103, -12, -49, -94, 30, 
  -79, 56, 4, -52, -65, 100, 59, 48, -60, 3, -55, -10, 6, -24, -101, 105, -70, 15, -84, 78, -93, 24, 73, -66, 
  -83, -2, -27, -98, -103, 63, -1, -68, -80, -9, 17, 20, 97, 92, -59, -8, -103, 28, -58, -70, -80, -87, 35, 13, 
  -108, -13, -15, 56, -95, -18, 34, 57, -27, -97, -20, -27, -88, 86, 14, -94, -33, -82, -99, -34, 91, -46, -78, 65, 
  30, -104, 98, -97, -10, -80, 27, 22, -105, -48, -39, -41, 40, 68, 65, 18, -35, 60, 13, 31, 82, 30, -32, 26, 
  74, -51, 73, -21, 40, 38, -111, -82, 28, -3, 76, 94, -100, -13, 15, 64, -94, -39, 39, 45, -37, 18, -83, -20, 
  57, 87, 66, 27, -110, 14, -20, -85, 85, 101, -10, 64, 43, 48, 43, -84, -99, -59, -78, -95, 59, -22, -54, -3, 
  -39, -61, -17, 94, 74, 99, -102, 96, 70, 5, -47, 15, 50, 34, -102, -59, 8, 82, 66, 42, 63, -61, 19, 48, 
  -89, 43, 43, -19, -28, 47, 56, 38, -94, 31, 38, -68, -29, 18, -94, 33, 47, 6, 29, 80, 42, -68, 19, -4, 
  -91, 77, -33, 65, -42, -103, 26, -104, 80, -95, -88, 16, 42, 96, -30, 101, -102, 61, -78, 98, -94, 75, 92, -70, 
  106, -81, -97, 32, -45, -26, 75, -73, 16, -80, 53, 61, 24, -86, 64, 92, 18, -89, 43, 25, 41, 96, 24, -95, 
  -66, -45, -61, -67, 67, -71, 94, 52, -83, -3, -36, 64, -82, 56, 70, -60, -52, 53, 32, -26, 61, 78, 95, -59, 
  29, 81, 1, 22, -65, -60, 43, 75, 80, 74, -66, -66, -25, -42, 18, 42, -31, 102, 22, -84, -5, 86, 12, -69, 
  -25, 41, -35, -55, -84, -98, 41, 57, 75, -46, 71, 31, 16, -3, 38, -44, -71, -31, -59, 62, 40, -77, -2, 10, 
  -27, -46, -74, 116, -59, -99, 47, 40, 94, 49, -101, 40, 52, -11, -9, -51, 84, 94, 54, -77, -47, 68, 3, -16, 
  9, -55, -92, 83, -16, -74, -55, 32, 19, -76, 3, -79, 101, -57, 78, -52, -90, 52, -79, -40, -51, 25, 77, -92, 
  -29, -46, 8, 40, -80, -46, -20, 41, 49, -82, 67, 9, 64, 86, 82, -82, -86, 57, 34, 65, -20, 22, 88, 78, 
  30, 26, -51, -65, -37, 99, 2, 72, -106, 99, -40, -47, 65, 4, -24, 78, -76, 57, -49, -66, 70, -30, -29, 88, 
  31, 83, -20, -85, 75, -101, 77, -34, -19, -47, 75, 25, -4, -68, 66, 66, -81, 57, -10, -62, 55, 30, -25, 4, 
  56, 40, 94, -96, -61, 20, 31, -97, -38, 26, 91, 55, 33, -35, -89, 44, -46, 51, 57, 22, 35, -83, -3, 68, 
  -14, -76, -79, 98, -8, -86, 63, -30, -7, -59, 9, -98, -5, -71, -39, 41, -39, 36, -18, -47, 3, -91, 75, -42, 
  82, 64, 70, -38, 72, 61, -41, -39, 27, 25, -104, -46, 93, 59, 84, 86, 25, -36, -59, -13, -26, -17, 8, -48, 
  10, -98, 26, 72, -77, 23, -41, -9, 29, -13, 100, 52, -16, 50, 93, -39, 104, -77, 1, 91, -86, -75, -85, 26, 
  -31, -45, 115, -89, 109, 25, -104, 51, 76, -45, -9, 54, -12, -96, 70, 33, -38, -104, 62, 71, 113, 8, 15, 1, 
  27, -32, -26, -20, 20, -76, 27, -44, 51, -33, -45, 75, -73, -28, -6, -31, -107, -60, 50, 98, -14, 108, -52, 31, 
  -12, 43, 75, -92, -37, 14, 90, -76, -5, 96, -26, 35, 19, -76, 44, -103, -89, 82, -78, -13, 13, 96, -70, -22, 
  -100, -9, -1, 67, 62, 44, -90, 95, -88, -11, -108, 91, 81, 108, 96, -105, -41, 8, 101, -46, 70, 57, 6, 98, 
  61, -2, -50, -30, 7, -69, -95, 29, -37, -58, 2, -31, -77, -13, -11, -44, 25, 35, -90, -26, 27, -72, 87, 39, 
  94, -39, 62, -79, 18, 67, 75, 36, -69, 47, 11, -98, -55, -69, 0, 63, -42, 90, 7, 63, -54, -16, 18, 32, 
  -48, 9, 18, 93, 106, -64, 60, -32, -103, 29, -1, -43, -97, 49, -117, -72, 4, -51, -59, -24, 28, 62, 85, 35, 
  -85, -102, -75, 43, -9, 14, 89, -61, 72, -42, -3, 53, -88, 42, 43, -56, 63, 28, -99, -90, 30, -38, -98, -94, 
  -45, -105, -11, -74, -30, 74, 76, -35, 81, 83, 65, 107, -6, 97, 32, -42, 42, 102, 17, -91, -100, -37, -4, -3, 
  -13, 17, -47, 0, -94, 91, 16, -44, 10, -87, 16, -36, -62, -57, 100, -51, -91, -13, -16, -88, 46, 73, 51, -81, 
  -41, -81, -25, 30, 80, -33, -1, -44, -4, 16, 42, -36, -18, 67, 108, 38, 80, 40, -78, 17, -105, 73, 74, 87, 
  -39, -75, -46, 104, 15, 94, -19, -85, -31, 48, -80, 69, 45, 88, 28, -9, -92, 19, 98, 37, 46, -47, -23, 13, 
  -72, 10, -7, 26, 102, -72, 95, 91, 92, 61, -57, 44, -26, 25, 29, 53, -41, -62, -99, -46, -68, 82, -70, -48, 
  31, -3, -68, -96, -98, 56, -17, -88, 93, -70, -100, -10, -94, 49, -74, -82, 67, -82, -76, -81, -61, -44, -103, -54, 
  -67, 76, -51, 75, 91, 78, 33, 48, -12, 55, 4, 35, 5, 101, 50, 23, -75, 53, -100, 76, -56, -50, -53, 19, 
  35, 52, 79, -7, -70, 90, -105, -56, -77, -87, -67, 21, 40, -40, 50, 96, 8, -38, -19, -89, 94, 35, -30, -10, 
  90, 63, 54, -4, -81, 20, -63, 59, 0, 54, 71, 103, 66, 68, 14, -28, -31, -55, -19, -87, 12, 67, -107, 7, 
  92, -42, 54, -110, -76, -88, -79, 93, -51, -27, -32, 7, -61, 31, -73, 96, -77, 38, 67, -74, 79, 4, -112, -7, 
  -25, 69, 71, -97, 63, 80, 103, -29, -75, -23, -26, -72, -81, 54, 18, -58, -37, 55, -70, -22, -15, -99, 82, 105, 
  104, 30, -15, -61, -70, -13, 83, -16, -7, 34, -70, -81, -40, -81, 96, 80, -58, -30, -53, -6, -34, 89, -27, -16, 
  71, -52, -90, 40, -59, 83, 69, 80, 30, -60, -73, -44, 43, 48, -89, -39, 62, -40, -90, 88, 5, -3, 108, -95, 
  41, -58, 24, 27, -91, 59, -41, 61, 40, -93, -94, -16, -85, -15, -77, 1, 41, -101, 72, 63, -71, -109, -4, 54, 
  -75, -51, -12, 89, -14, 57, 73, -50, 41, 24, 16, -64, 105, 106, -61, -109, 34, -41, -36, -40, -87, -97, -109, 4, 
  2, 60, 34, 82, 46, 12, -36, -26, -52, -95, -50, 55, -38, -11, -6, 58, -57, -79, 71, -36, -80, 85, -26, -105, 
  17, -1, -33, -82, -100, -45, 46, -66, 27, 37, -95, 89, 23, -95, -39, 12, -64, 4, 55, -56, 56, 98, 23, -66, 
  -32, -46, 62, 35, 59, -6, -38, 93, 67, 73, 109, 5, -81, 61, -47, 127, -56, 108, 44, 73, -75, -44, -56, 69, 
  -107, -35, -56, -70, 58, 20, 40, 81, -68, 13, 79, -38, 53, -3, 79, 49, 99, 14, -95, 25, 97, -58, -23, 6, 
  99, -11, 89, -10, 56, 79, 89, -51, 84, 98, -15, -61, 79, -41, -54, -16, -99, 70, 3, -23, -53, -33, 36, -91, 
  39, 10, -81, 27, -64, -19, 61, 29, 12, 79, -90, -88, 102, 45, -68, 67, 33, 69, 39, 23, -34, -93, -30, 93, 
  21, 48, -34, -93, -22, 44, -66, 28, 58, 46, 45, -88, -45, -28, 12, 68, 65, -105, -37, -81, 80, 49, 11, -61, 
  -85, -49, 79, -95, -101, -6, -35, 20, -58, -29, 100, 89, -95, -72, 64, 100, -97, 74, 64, -53, -7, 1, -51, 52, 
  92, 22, 35, -51, 106, -105, -6, -70, 26, -36, 97, 103, 88, 56, 45, 38, -47, 21, -31, 82, -38, -95, -52, 51, 
  -10, -62, -30, -71, 24, -66, -85, 19, 10, 24, -76, 43, -44, 102, 34, -42, 106, -52, -62, -45, 23, 84, 46, 8, 
  -22, -89, -45, 20, 26, -73, -69, -107, -5, -72, -68, -60, 1, 90, 77, -18, 65, 5, -22, -71, 90, 63, -63, 89, 
  34, -56, -65, -4, -64, 118, 93, -11, -86, -88, -48, -94, 92, -12, -71, -115, 73, -74, 69, -84, 48, -10, -118, 89, 
  54, 98, -17, 35, 17, 98, 52, 0, 17, 11, -12, -71, -79, -19, -42, -75, -90, -64, 71, -83, 58, -14, -51, -6, 
  108, 2, -46, 67, 43, 25, -36, -44, -91, 28, 13, -16, -81, 49, -42, 74, -53, -62, 52, -68, -92, 86, -87, 74, 
  63, 28, 95, 27, 70, -56, -77, 48, 76, 87, 21, 69, 22, -7, -36, -44, 41, 86, 4, -62, 90, -96, -41, 84, 
  -58, -15, -90, 26, -18, 111, -100, -55, 63, -87, -61, -48, -39, -81, -98, 83, 104, -45, 92, 13, -44, 70, -63, -26, 
  -42, -32, -49, 43, -4, 69, 95, 64, 93, -8, 39, 34, -45, 93, 87, -53, 61, 92, 109, 78, 25, 31, -87, -50, 
  -37, 103, 85, -85, -10, 57, -78, 46, -49, -93, -56, -88, -29, 73, 81, 69, 74, 38, -80, -21, 10, -50, 105, 1, 
  -34, -67, -104, 67, -66, 62, -46, -58, 78, 13, 91, -48, -28, -4, 74, -8, -106, -48, 96, -62, -48, -20, -75, 82, 
  -2, 98, 93, -63, -49, -4, 60, -53, 53, 40, 32, 93, -88, 24, -100, 53, 20, -111, -88, -89, 91, -105, 58, 58, 
  -48, 66, 2, -5, 97, -105, -70, -93, 35, -93, 50, 82, -41, 34, -115, -111, 3, 65, -12, -92, 91, 79, 11, -28, 
  -6, 39, 76, -82, 61, 34, 52, 46, -41, -95, 82, -38, 50, 98, 41, -17, -9, 30, 105, -97, 40, 38, -59, 11, 
  85, 86, 116, 36, -81, 8, -32, 56, -2, -9, 3, 57, 96, -65, -69, 6, 75, -13, 91, -95, -11, -18, 41, -8, 
  -84, 86, 89, -88, -15, -19, 8, -90, 0, 66, 51, 94, -57, 81, -37, -41, -48, -50, -58, -59, 19, -39, -85, -88, 
  -10, -91, -16, 90, 111, 39, 10, 58, -4, 2, -31, 60, 37, -55, 58, 63, -74, -11, 98, 54, -49, -43, 108, -10, 
  39, 65, 74, 76, -110, 99, -9, -13, -99, 73, -44, 90, 105, -73, 61, -44, 69, 25, 99, 68, 7, -93, -63, -85, 
  47, 33, -16, 32, -70, -87, 0, 97, 66, 61, 102, -8, -35, 1, -7, -45, 68, -85, -2, 26, -71, -5, -16, 45, 
  42, 43, -70, -43, -4, 69, -5, -59, 102, 89, -14, -57, 98, 101, -5, -76, -30, -108, -99, -31, -65, 77, -73, 94, 
  27, 103, -14, 67, -87, -12, 44, 67, 11, 86, 27, -47, 104, 39, 90, 29, 85, -47, 22, 44, 57, 32, -119, 51, 
  -3, -58, -94, -81, -83, -29, 5, -31, -6, 99, 6, -91, 6, -44, -18, 100, -9, 74, -14, 62, -26, -14, -10, 57, 
  68, -50, 31, 0, -17, -58, -68, -101, 25, 104, -10, -48, -55, -47, -19, -7, 82, -74, -35, 91, 31, 74, -80, 10, 
  -82, -49, -95, -67, -78, 55, 2, 82, -111, -49, -47, 41, -8, 19, -60, -18, 89, -82, 4, -4, 80, -45, 104, 94, 
  93, -57, -79, -51, -5, -73, -18, 87, -30, -96, -19, -70, 100, 74, -62, -55, -33, -68, 104, 93, 77, -65, -98, 2, 
  -11, 47, -84, -82, -29, -31, -33, -65, 1, 33, -20, 43, -8, 38, 16, -75, -13, -91, -71, -3, 86, -98, -20, -67, 
  -93, 70, 67, 67, 43, 0, -88, 94, -43, -26, 31, -5, 35, 77, -80, -86, 14, -109, -54, -41, 7, -59, 9, 97, 
  60, -23, -85, 58, 68, 63, -23, -44, -36, -80, 31, -15, 40, 72, -91, -77, -34, 34, -69, -66, 5, 55, -34, -46, 
  27, 5, 112, 98, 73, 20, 43, 2, -23, 54, 69, -54, -83, 105, -62, -7, 15, 44, -74, 19, 82, -93, 64, -36, 
  11, 78, 30, 108, -19, -34, -58, -43, -49, -14, -4, -33, -85, 102, 63, -56, 17, -25, -92, 1, 99, 32, -45, -85, 
  87, 90, -15, -36, 53, -101, 101, 49, -33, 98, -39, 38, -21, -12, 24, -30, -30, -21, -8, 35, -20, 67, 47, 53, 
  -20, 25, -90, 7, 29, -24, -50, 83, 63, -56, -8, -30, 78, 88, -62, -9, 22, 36, 60, 86, 55, 64, -82, 66, 
  -98, -73, 56, 22, -74, 41, 34, 80, 32, -42, 43, 48, 38, -119, -15, -5, -57, -17, 0, -11, 2, 17, 34, -90, 
  47, 18, 76, 37, 48, -32, 20, 116, -50, 54, 6, -62, -98, 54, -39, -6, 9, 106, 0, -23, -34, -24, 96, 12, 
  -24, 6, 43, 55, -9, -72, -24, 15, 73, -25, -88, 34, 75, 49, -52, -12, 17, 83, 75, -50, -2, 85, -115, -10, 
  55, -29, -24, -61, 109, 52, 64, -86, 64, -24, 15, 54, 87, 98, -104, -48, -70, -109, -78, -51, -7, -46, 50, 45, 
  15, -33, 0, -39, 55, -14, 110, -70, -116, -65, 43, -80, 100, 101, 96, -61, -40, -6, 73, -107, 71, 106, 89, 57, 
  36, -90, -26, -91, -39, -72, 49, 17, 19, 103, -61, 91, -70, 85, 70, -102, -50, 68, 34, 75, 40, 35, -15, -42, 
  38, 59, -55, 96, 75, 85, 65, 42, 108, 44, -57, -9, -75, 13, -84, -89, 7, -28, -100, 45, -91, -68, -8, 44, 
  -86, -35, 76, 6, -39, -91, 96, 27, -30, -51, -65, -87, 92, -102, 19, -40, 16, 93, 41, 22, -53, 20, 26, 89, 
  -14, -57, -61, -88, 51, -50, -29, -81, 46, -96, -104, -15, 92, -23, -6, -52, 20, 80, -82, -55, -45, -98, 16, -60, 
  -37, 40, -73, -35, -97, 75, 93, 36, -84, -64, 59, -94, 8, 31, -26, -16, 63, 65, 12, -79, -70, 95, -35, -91, 
  70, 31, 87, -16, 2, 103, -59, -53, 7, -60, 65, -11, -1, -46, 38, 67, -68, -39, 93, -79, 39, -49, -109, -10, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 200,24 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0015441520372405648, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,200 } };
const TfArray<1, float> quant7_scale = { 1, { 0.059131532907485962, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.045276720076799393, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.068399883806705475, } };
const TfArray<1, int> quant9_zero = { 1, { 37 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension0, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension7, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_18_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
